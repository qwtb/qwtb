function alg_test(calcset) %<<<1
% Part of QWTB. Test script for algorithm wlsfit
%
% See also qwtb

% Pearson data test (correct calculation test), WLS, unc(y) input --------------------------- %<<<1
% Generate data %<<<2
DI = [];
tmp = [
                0  5.900000000000000;
0.900000000000000  5.400000000000000;
1.800000000000000  4.400000000000000;
2.600000000000000  4.600000000000000;
3.300000000000000  3.500000000000000;
4.400000000000000  3.700000000000000;
5.200000000000000  2.800000000000000;
6.100000000000000  2.800000000000000;
6.500000000000000  2.400000000000000;
7.400000000000000  1.500000000000000;
];
DI.x.v = tmp(:, 1);
DI.y.v = tmp(:, 2);
DI.x.u = diag([
0.001     0     0       0     0      0            0    0            0 0;
    0 0.001     0       0     0      0            0    0            0 0;
    0     0 0.002       0     0      0            0    0            0 0;
    0     0     0 0.00125     0      0            0    0            0 0;
    0     0     0       0 0.005      0            0    0            0 0;
    0     0     0       0     0 0.0125            0    0            0 0;
    0     0     0       0     0      0 0.0166666667    0            0 0;
    0     0     0       0     0      0            0 0.05            0 0;
    0     0     0       0     0      0            0    0 0.5555555556 0;
    0     0     0       0     0      0            0    0            0 1;
].^0.5);
DI.y.u = diag([
1            0    0     0    0    0            0            0    0     0;
0 0.5555555556    0     0    0    0            0            0    0     0;
0            0 0.25     0    0    0            0            0    0     0;
0            0    0 0.125    0    0            0            0    0     0;
0            0    0     0 0.05    0            0            0    0     0;
0            0    0     0    0 0.05            0            0    0     0;
0            0    0     0    0    0 0.0142857143            0    0     0;
0            0    0     0    0    0            0 0.0142857143    0     0;
0            0    0     0    0    0            0            0 0.01     0;
0            0    0     0    0    0            0            0    0 0.002;
].^0.5);
DI.n.v = 1;

% Call algorithm %<<<2
CS.unc = 'guf';
DO = qwtb('wlsfit',DI,CS);

% Check results %<<<2
% reference values obtained by running the code itself, so it is not a real
% test:
assert(all(abs(DO.coefs.v(:)' - [
    6.100109316610476 ...
    -0.610812956579648 ...
]) < 3e-5));
assert(all(abs(DO.coefs.u(:)' - [
    2.046626858334776e-01 ...
    3.008744883974250e-02 ...
]) < 6e-5));
assert(all(all(abs(DO.coefs.c(:)' -[
    1.000000000000000  -0.984866706457429 ...
    -0.984866706457429   1.000000000000000 ...
]) < 5e-5)));

assert(all(abs(DO.yhat.v(:)' -[
    6.100109316610476 ...
    5.550377655688793 ...
    5.000645994767110 ...
    4.511995629503391 ...
    4.084426559897638 ...
    3.412532307660025 ...
    2.923881942396307 ...
    2.374150281474624 ...
    2.129825098842764 ...
    1.580093437921081 ...
]) < 3e-5));
assert(all(abs(DO.yhat.u(:)' -[
    2.046626858334776e-01 ...
    1.780556319065970e-01 ...
    1.516156771267095e-01 ...
    1.283373081469444e-01 ...
    1.082531255521455e-01 ...
    7.774410644894567e-02 ...
    5.738602828671874e-02 ...
    3.979110667890829e-02 ...
    3.597419549403078e-02 ...
    4.126274810809098e-02 ...
]) < 3e-5));
assert(strcmpi(DO.model.v,'Weighted Least Squares, weights based on u(y)'));

% Pearson data test (correct calculation test), WLS, w input --------------------------- %<<<1
% Generate data %<<<2
% Set input weights:
DI.w.v = DI.y.u;

% Call algorithm %<<<2
DO = qwtb('wlsfit',DI,CS);

% Check results %<<<2
assert(all(abs(DO.yhat.v(:)' -[
    6.100109316610476 ...
    5.550377655688793 ...
    5.000645994767110 ...
    4.511995629503391 ...
    4.084426559897638 ...
    3.412532307660025 ...
    2.923881942396307 ...
    2.374150281474624 ...
    2.129825098842764 ...
    1.580093437921081 ...
]) < 3e-5));
assert(all(abs(DO.yhat.u(:)' -[
    2.046626858334776e-01 ...
    1.780556319065970e-01 ...
    1.516156771267095e-01 ...
    1.283373081469444e-01 ...
    1.082531255521455e-01 ...
    7.774410644894567e-02 ...
    5.738602828671874e-02 ...
    3.979110667890829e-02 ...
    3.597419549403078e-02 ...
    4.126274810809098e-02 ...
]) < 3e-5));
assert(strcmpi(DO.model.v,'Weighted Least Squares, weights based on w'));

% Pearson data test (correct calculation test), OLS --------------------------- %<<<1
% Generate data %<<<2
% remove uncertainty of y and weights:
DI.y = rmfield(DI.y, 'u');
DI = rmfield(DI, 'w');

% Call algorithm %<<<2
% No y uncertainty, so CS must not be set to none:
CS.unc = 'none';
DO = qwtb('wlsfit',DI);

% Check results %<<<2
% reference values obtained by running the code itself, so it is not a real
% test:
assert(all(abs(DO.coefs.v(:)' - [
    5.761185190439041 ...
    -0.539577274984042 ...
]) < 3e-5));
assert(all(abs(DO.coefs.u(:)' - [
    0.598956465392927 ...
    0.133160632414795 ...
]) < 6e-5));
assert(all(all(abs(DO.coefs.c(:)' -[
    1.000000000000000  -0.849266424548598 ...
    -0.849266424548598   1.000000000000000 ...
]) < 5e-5)));

assert(all(abs(DO.yhat.v(:)' -[
    5.761185190439041 ...
    5.275565642953403 ...
    4.789946095467766 ...
    4.358284275480532 ...
    3.980580182991703 ...
    3.387045180509257 ...
    2.955383360522024 ...
    2.469763813036387 ...
    2.253932903042769 ...
    1.768313355557132 ...
]) < 3e-5));
assert(all(abs(DO.yhat.u(:)' -[
    0.598956465392927 ...
    0.501186619453954 ...
    0.415153765638771 ...
    0.355516445035910 ...
    0.323720043074860 ...
    0.325522598376897 ...
    0.365743560935003 ...
    0.438379687170975 ...
    0.476819200651502 ...
    0.572064028136184 ...
]) < 3e-5));
assert(strcmpi(DO.model.v,'Ordinary Least Squares'));

end % function

% vim settings modeline: vim: foldmarker=%<<<,%>>> fdm=marker fen ft=octave textwidth=80 tabstop=4 shiftwidth=4
